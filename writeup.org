#+TITLE: Embedded Domain Specific Language Study -- Tagless Final
#+AUTHOR: Zixiu Su
#+DATE: 2023-12-12

#+options: toc:nil
# better support of unicode and just in general
#+latex_compiler: lualatex
# better typography and fonts
#+latex_header: \usepackage{fontspec}
#+latex_header: \setmonofont[Scale=0.8]{Source Code Pro}
#+latex_header: \setmainfont{Charter}
#+latex_header: \setsansfont{IBM Plex Sans}
#+latex_header: \usepackage{setspace} % Set line spacing
#+latex_header: \setstretch{1}
# no annoying link boxes
#+latex_header: \usepackage[svgnames]{xcolor}
#+latex_header: \hypersetup{colorlinks, urlcolor=MidnightBlue}
# enable first paragraph indent
#+latex_header: \usepackage{indentfirst}

* Introduction

As the final project for CSCI-P-424 Advanced Functional Programming class, this project is intended to study several techiniques to embed a *domain specific language* (DSL) into a typed host language (*Haskell*).

The main DSLs we choose are is a simply typed lambda calculus extended with integers. Our main goal is to study *tagless final*, and then compare it with other methods such as *free monad* and *GADTs*.

The methods are not exclusive -- often, we can combine them. This study is only preliminary and empirical. But further investigation will be discussed.

For the most part, the project follows Oleg Kiselyov's tutorial on tagless final: https://okmij.org/ftp/tagless-final/index.html.


* Naive Implementation of STLC in Haskell

As in ~STLC/Naive.hs~, this approach mimics the CEK style interpreter taught in B521 Programming Languages Principle. But translation into a typed context complicates the situation.

The expressions of the language are defined as a datatype: 
#+BEGIN_SRC haskell
  data Expr where
    Int :: Integer -> Expr
    Add :: Expr -> Expr -> Expr
    Var :: String -> Expr
    Lam :: String -> Expr -> Expr
    App :: Expr -> Expr -> Expr
#+END_SRC

The interpreter is attempted to be of type: ~Expr -> Env -> Val~, so we define environment and value type as:

#+BEGIN_src haskell
data Val where
  VInt  :: Integer -> Val
  VClos :: String -> Expr -> Env -> Val

type Env = Map String Val
#+END_src

Some expressions evaluate to integer values and some closures,
the two have to be unionized under ~Val~ because the interpreter can only return one result type. This introduces *tags* (the constructors, ~VInt~ and ~VClos~). Every time a value is used, it needs to be read off from ~Val~ by pattern matching, which brings boilerplate and run-time overhead.

For example, in the case of the expression ~Add x y~:
#+BEGIN_src haskell
  interp (Add x y) env  = do
    xval <- interp x env
    yval <- interp y env
    xint <- unpack xval
    yint <- unpack yval
    return $ VInt (xint + yint)
    
  unpack (VInt n) = Just n
  unpack x        = error $ show x ++ " is not VInt"
#+END_src

Apparently, this is not an efficient way to embed STLC. The type does not contain enough information to describe the actual values.
And Kiselyov gives a solution to the issue using GADTs.

* GADTs Provide "Tight" Embedding

As shown in ~STLC/GADT.hs~, the expressions and variables are defined as:
#+BEGIN_src haskell
  data Var env t where
    V0 :: Var (t, env) t
    VS :: Var env      t -> Var (a, env) t
  
  data Exp env t where
    B :: Bool                  -> Exp env Bool
    V :: Var env      t        -> Exp env t
    L :: Exp (a, env) b        -> Exp env (a -> b)
    A :: Exp env      (a -> b) -> Exp env a        -> Exp env b
#+END_src

Now the environments are represented by variable ~env~ in ~Exp~, and it's tuple type which serves as a heterogenous container, which exposes the type of values.

Also, the type of the value of an expression is exposed by ~t~, which allows the intepreter to return a (ad-hoc) polymorphic result:

#+BEGIN_src haskell
  interp :: Exp env t -> env -> t
  interp (B b)    _   = b
  interp (V var)  env = lookp var env
  interp (L body) env = \arg -> interp body (arg, env)
  interp (A f a)  env = (interp f env) (interp a env)

  lookp :: Var env t -> env -> t
  lookp (VS v) (_, xs) = lookp v xs
  lookp V0     (x, _)  = x
#+END_src

This eliminates the "tags" in the union value type in the previous approach.

* Tagless Final

Another way to achieve "tagless" is called tagless final. The duality is not so clear to the author in the formal, categorical sense. Some discussion can be found here: https://cstheory.stackexchange.com/questions/45565/what-category-are-tagless-final-algebras-final-in. The categorical semantics of tagless final requires further investigation, it might be related to CPS and Yoneda lemma.

The use of typeclass is a common theme among Haskell libraries, (eg.: ~mtl~). In object-oriented programming, there is the similar concept of dependency injection. What justifies tagless final as a distinct concept seems also depends on the question in the previous paragraph.

** Motivating Example

Starting from a simple example (see ~TriviaL.hs~),  The usual way is to define a recursive datatype ~Exp~ for the expressions, and then define the interpreter function by pattern matching. And, similarly, a pretty printer:

#+BEGIN_SRC haskell
  data Exp = Lit Int | Neg Exp | Add Exp Exp

  interp :: Exp -> Int
  interp (Lit x)   = x
  interp (Neg x)   = -(interp x)
  interp (Add x y) = interp x + interp y

  pprint :: Exp -> String 
  pprint (Lit x)   = show x
  pprint (Neg x)   = "-(" ++ pprint x ++ ")"
  pprint (Add x y) = "(" ++ pprint x ++ "+" ++ pprint y ++ ")"
#+END_src

A family of functions can be implemented likewise, eg.: parser, type-checker, etc. Using Haskell typeclass feature, we can treat the result types of these functions abstractly, and factor out the common interface:

#+BEGIN_SRC haskell
class SymAdd repr where
  lit :: Int -> repr
  neg :: repr -> repr
  add :: repr -> repr -> repr
#+END_SRC

And implement each result type (~Int~ for ~interp~, ~String~ for ~pprint~, etc.)  as a concrete ~repr~-esentation. For example, ~interp :: Exp -> Int~ becomes: (note ~eval~ only serves to choose the concrete representation/result type)
 
#+BEGIN_SRC haskell
  instance SymAdd Int where
    lit = id
    neg x = -x
    add x y = x + y

  eval :: Int -> Int
  eval = id
#+END_SRC

Programs now are "abstract" and up to concrete implementation. For example, we write 3+ (-4 + 5) as ~prog0 = add (lit 3) (add (neg (lit 4)) (lit 5))~, which is typed as ~prog0 :: SymAdd repr => repr~. Each instance of ~SymAdd~ can also be seens as a denotational semantics for the program.
     
** STLC Using Tagless Final

As in ~STLC/TaglessFinal.hs~, directly translating the expression definition in ~STLC/GADT.hs~ yields:

#+BEGIN_SRC haskell
  class Symantics repr where
    v0  :: repr (a, env) a
    vs  :: repr env a -> repr (any, env) a
    lam :: repr (a, env) b -> repr env (a -> b)
    app :: repr env (a -> b) -> repr env a -> repr env b
  
    int :: Integer -> repr env Integer
    add :: repr env Integer -> repr env Integer -> repr env Integer
#+END_SRC

For evaluation, we define the result type ~R~ using ~newtype~ and implement it as:
#+BEGIN_SRC haskell
newtype R env a = R { unR :: env -> a }

instance Symantics R where
  v0   = R $ \(x, xs) -> x
  vs v = R $ \(_, xs) -> (unR v) xs
  
  lam body = R $ \xs -> \x -> (unR body) (x , xs)
  app f g  = R $ \xs -> (unR f) xs $ (unR g) xs

  int n   = R $ \xs -> n
  add a b = R $ \xs -> (unR a) xs + (unR b) xs
#+END_SRC

Notice the ~R~ and ~unR~ will be erased at run-time because the ~newtype~ wrapper does not change the same run-time representation, so they are different from the *tags* mentioned earlier. 

Adopting a higher order abstract syntax (HOAS) would make the class definition even more simpler.

** 1# Register Machine

In order to test the tagless final method on more samples, we attempted to implement Larry Moss's *1#* register machine. Which is similar to Turing machines, for more details please see: https://iulg.sitehost.iu.edu/trm/.

To give a simplified intuition, the register machine contains two parts: 1. Program: a list of instructions and a program counter which points to the current instruction; 2. Registers: a list of locations, each contains some textual data

At each step, the machine carries out the current instruction until the program counter reaches the end of the program. The instructions define actions such as: 1. shifting the program counter, 2. write symbols onto a particular register address, or 3. parse the first symbol of some address and shift the program counter based on the result.

The main discover from implementing 1# appeared when we tried to implement both instructions and machine states using typeclasses. Notice the machine's datatype is dependent on the instruction's because it contains instructions as data. And whenever a function is dependent on those abstract types as data, it is necessary to instantiate them into the inspectable "initial" representation (See ~OneSharp/ThreeSharp.sh~ line#98).

It remains an open question if the instantiation to the initial datatype is avoidable. 

** Typed Formatting

A template string with typed holes can be used both for pretty printing and parsing. For example, ~sprintf~ and ~sscanf~ in *C*. The duality is an interesting topic in bidirectional transformation.

As in ~FPP.hs~, tagless final is particularly suitable here for typing the format template abstractly. Here are the typeclass definition and an example format with the inferred type:

#+BEGIN_SRC haskell
  class FormatSpec repr where
    lit  :: String -> repr a a
    int  :: repr a (Int -> a)
    char :: repr a (Char -> a)
    (^)  :: repr b c -> repr a b -> repr a c

  -- fmt0 :: FormatSpec repr => repr a (Char -> a)
  fmt0 = lit "Hello " ^ char
#+END_SRC

The type ~repr a b~ can be understood as result type ~a~ is extended by ~b~. Components of the format template are concatenated by ~(^)~. A good exercise is to derive the type of ~fmt1 = char ^ int~ by hand, which will illustrate the unification of type variables.

#+BEGIN_SRC haskell
  newtype FPr a b = FPr ((String -> a) -> b)

  sprintf :: FPr String b -> b
  sprintf (FPr format) = format id

  instance FormatSpec FPr where
    lit str = FPr $ \k -> k str
    int     = FPr $ \k x -> k (show x)
    char    = FPr $ \k x -> k [x]
    (FPr a) ^ (FPr b)  = FPr $ \k -> a (\sa -> b (\sb -> k (sa ++ sb)))
#+END_SRC

The pretty printer representation is defind above as  ~FPr a b~. Observe its type is almost a CPS monad, but with two result types.

** Summary

The benefits of adopting tagless final are:

  1. There is no dispatch overhead on pattern matching of the expression. The abstract expression does the recursive calls automatically and combine their results, akin to a recursive schemes. Which brings performance improvements.

  2. It is easier to achieve incremental development, compared to adding cases in the AST datatype and modifying each function mapping out from that datatype. Adding new terms is done by defining new typeclasses. Old programs will not be broken this way. New programs will contain more constraints in their type signatures. And presumably there is no need to recompile previous code (need to verify).

Some directions to extend the current project:

  1. Extend STLC with ~callCC~.

  2. Solve the problem posed by *1#* (avoid using initial datatypes).

  3. Study the semantics of tagless final and its polymorphism.

* Free Monad

The project was intended to compare tagless final with free monad, but it turns out the two approaches are somewhat orthogonal. A free monad is indeed an initial object, we might as well "finalize" it -- define the free monad as a typeclass and implement concrete interpretations as instances.

Unfortunately due to time limit, the free monad approach could not be investigated properly even though it has a clear categorical semantics. Here we briefly report the "user experience" as we learn to implement simple programs with free monads. The calculator example follows Nikolay Yakimov's tutorial: https://serokell.io/blog/introduction-to-free-monads. And we expanded it to STLC, thanks to the help of Artem Yurchenko and his examples.

** A Calculator
